class Racket {

   field int x, y; 
   field int size; 
   field int prevY; // добавляем поле для отслеживания предыдущей позиции

   constructor Racket new(int _X, int _Y, int _Size) {
      let x = _X;
      let y = _Y;
      let size = _Size;
      let prevY = _Y; // инициализируем предыдущую позицию
      do draw();
      return this;
   }

   method int getX() { return x; }
   method int getY() { return y; }
   method int getSize() { return size; }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void draw() {
      do RacketDrawing.draw(x,y);
      return;
   }

   method void erase() {
      var int memAddress;
      var int i;
      let memAddress = 16384 + (prevY * 32) + (x / 16);
      let i = 0;
      while (i < 32){
         do Memory.poke(memAddress + (i * 32), 0);
         do Memory.poke(memAddress + (i * 32) + 1, 0);
         let i = i + 1;
      }      
      return;
   }

   method void moveUp() {
      if (y > 1) {
         do erase(); // стираем в старой позиции
         let prevY = y; // сохраняем текущую позицию
         let y = y - 2; // обновляем координату
         do draw(); // рисуем в новой позиции
      }
      return;
   }

   method void moveDown() {
      if ((y + size) < 254) {
         do erase(); // стираем в старой позиции
         let prevY = y; // сохраняем текущую позицию
         let y = y + 2; // обновляем координату
         do draw(); // рисуем в новой позиции
      }
      return;
   }
}